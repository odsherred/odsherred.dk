<?php

/**
 * @file
 * Code for the OS2Web Acadre ARP Handler feature.
 */
include_once 'os2web_acadre_arp.features.inc';

/**
 * Implementation of hook_menu().
 */
function os2web_acadre_arp_menu() {
  $items['os2web/ws/arp'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_os2web_acadre_arp_soap_server',
    'access callback' => TRUE,
  );
  return $items;
}

function _os2web_acadre_arp_test_page() {
  module_load_include('class.inc', 'os2web_acadre_arp', 'SoapClientAuth');

  $options = array(
    'login' => 'acadre',
    'password' => 'PernoD=38%',
//      'proxy_host' => 'localhost',
//      'proxy_port' => 8080,
    'cache_wsdl' => WSDL_CACHE_BOTH,
    'exceptions' => TRUE,
    'trace' => TRUE,
  );
  $xdebug = function_exists('xdebug_enable');
  if ($xdebug)
    xdebug_disable();
  try {
    //$client = new SoapClientAuth('http://10.1.1.112/Acadre/Acadre.Publishing.PublishingDataProviderService/PublishingDataProviderService.svc?wsdl', $options);
    $client = new SoapClientAuth('http://10.1.1.108/Acadre/Acadre.Publishing.PublishingDataProviderService/PublishingDataProviderService.svc?wsdl', $options);
  } catch (Exception $exc) {
    error_log(basename(__FILE__) . ':' . __LINE__ . ' Var: $exc->getTraceAsString() = ' . print_r($exc->getTraceAsString(), 1));
  }
  if ($xdebug)
    xdebug_enable();
  $args = array(
    'itemId' => '06d6f520-2fe6-41a0-b72a-d16f415e9bc8',
    'locationId' => 'default',
    'fileReference' => 1635233,
    'version' => 1,
  );
  try {
    $call = $client->getPhysicalFile($args);
  } catch (Exception $exc) {
//    error_log(basename(__FILE__) . ':' . __LINE__ . ' Var: $client = ' . print_r($client, 1));
    error_log(basename(__FILE__) . ':' . __LINE__ . ' Var: $exc->getTraceAsString() = ' . print_r($exc->getTraceAsString(), 1));
  }
  return '<pre>' . print_r($call, 1);
}

/**
 * _os2web_acadre_arp_soap_server 
 * 
 * @access protected
 * @return void
 *
 * Example http://mydomain.dk/os2web/ws/arp?wsdl 
 */
function _os2web_acadre_arp_soap_server() {
  if (isset($_GET['wsdl'])) {
    _os2web_acadre_arp_get_wsdl();
  }
//  global $HTTP_RAW_POST_DATA;

  ini_set("soap.wsdl_cache_enabled", "0");
  $server = new SoapServer(drupal_get_path('module', 'os2web_acadre_arp') . '/os2web_acadre_arp_publishing_handler.wsdl');
//  $count = variable_get('os2web_acadre_arp_soap_count', 0);
//  file_unmanaged_save_data($HTTP_RAW_POST_DATA, 'public://soap/request-' . $count++ . '.soap.xml');
//  variable_set('os2web_acadre_arp_soap_count', $count);


  /**
   * Published a given input type. Delegates actual node creation to worker functions 
   * 
   * @param mixed $info 
   * @param mixed $parentItemId 
   * @access public
   * @return void
   */
  function publish($info, $parentItemId) {
    $item_id = $info->ItemId;

    $meta = $info->Metadata;
// File was decoded to utf-8 data, so charset will break.
    $meta = preg_replace('/(<\?xml[^?]+?)utf-16/i', '$1utf-8', $meta);
    $meta = simplexml_load_string($meta) or soap_error(2);
    $info->Metadata = (object) $meta;

    $type = $meta->getName();
    switch (strtolower($type)) {
      case 'publishedcase':
        return _os2web_acadre_arp_process_case($info);
      case 'publisheddocument':
        return _os2web_acadre_arp_process_document($info, $parentItemId);
      case 'publishedmemo':
        return _os2web_acadre_arp_process_memo($info, $parentItemId);
      case 'publishedparty':
        return _os2web_acadre_arp_process_party($info, $parentItemId);
      case 'publishedsupplementdocument':
        return _os2web_acadre_arp_process_supplement($info, $parentItemId);
      default:
        error_log("Unhandled request: \$type = " . print_r($type, 1));
        soap_error(4);
    }
    return 'Ilde request';
//TODO: Old ignored code... needs handling
//
//  $supplement = $info->MetaData->SupplementDocument;
//  if (!empty($supplement)){
//    return _os2web_acadre_arp_process_suplement();
//  } 
//
//  $party = $info->MetaData->Party;
//  if (!empty($party)){
//    return _os2web_acadre_arp_process_party();
//  } 
//
//  $memo = $info->MetaData->Memo;
//  if (!empty($memo)){
//  }
//  return $to_return;
  }

  /**
   * Unpublishes a given ItemId
   *
   * @param mixed $item_id
   * @param mixed $location_id
   * @access public
   * @return void
   */
  function unpublish($item_id, $location_id) {
    $nids = _os2web_acadre_arp_find_item($item_id);
    if (empty($nids)) {
      return 'Success. No nodes removed.';
    }
    else {
      foreach ($nids as $nid) {
        node_delete($nid);
      }
      return 'Success. Removed node-id(s): ' . implode(',', $nids);
    }
  }
  
  $server->AddFunction('publish');
  $server->AddFunction('unpublish');
  $server->handle();

}

// Publishing functions:

/**
 * _os2web_acadre_arp_process_case 
 * 
 * @access protected
 * @return void
 */
function _os2web_acadre_arp_process_case($info) {
  $item_id = $info->ItemId;
  $meta = $info->Metadata;
  $node = (object) NULL;
  $node->type = 'arp_case';
  $node->uid = 0;
  $node->status = 1;
  $node->comment = 0;
  $node->promote = 0;
  $node->moderate = 0;
  $node->sticky = 0;
  $node->language = LANGUAGE_NONE;
  $arp_year = $meta->Year % 100;
  node_object_prepare($node);

  $node->title = (string) $meta->Title;
  $node->field_itemid[LANGUAGE_NONE][]['value'] = $item_id;
  $node->body[LANGUAGE_NONE][]['value'] = (string) $meta->CaseContent;
  $node->field_arp_case_type[LANGUAGE_NONE][]['value'] = (string) $meta->CaseType;

  $tid = db_query('SELECT tid FROM  `taxonomy_term_data` WHERE  `name` LIKE  :term', array(
    ':term' => $meta->JournalizingCode[0]->FieldValue . '%'
      ))->fetchField();
  if (is_numeric($tid)) {
    $node->field_termref_kle[LANGUAGE_NONE][]['tid'] = $tid;
  }

  $responsible = $meta->CaseResponsibleUser;
  $node->field_arp_case_handler_ini[LANGUAGE_NONE][]['value'] = $responsible->UserInitials;
  $node->field_arp_casehandler_name[LANGUAGE_NONE][]['value'] = $responsible->UserName;
  $node->field_arp_case_created[LANGUAGE_NONE][]['value'] = strtotime((string) $meta->CreationDate);
  $node->field_arp_case_last_modified[LANGUAGE_NONE][]['value'] = strtotime((string) $meta->CreationDate);
  $node->field_case[LANGUAGE_NONE][]['case_ident'] = $arp_year . '/' . (string) $meta->SequenceNumber;
  $node->field_arp_case_id[LANGUAGE_NONE][]['value'] = $arp_year . '/' . (string) $meta->SequenceNumber;



  node_submit($node);

  node_save($node);

  if (is_numeric($node->nid)) {
    return "Success: Node-id = " . $node->nid;
  }
  else {
    soap_error(3);
  }
}

/**
 * _os2web_acadre_arp_process_document 
 * 
 * @access protected
 * @return void
 */
function _os2web_acadre_arp_process_document($info, $parent_item_id) {
  $node = (object) NULL;
  $node->type = 'arp_document';
  $node->uid = 0;
  $node->status = 1;
  $node->comment = 0;
  $node->promote = 0;
  $node->moderate = 0;
  $node->sticky = 0;
  $node->language = LANGUAGE_NONE;
  node_object_prepare($node);

  if ($nid = array_shift(_os2web_acadre_arp_find_item($info->ItemId))) {
    $node->nid = $nid;
  }

  $node->title = (string) $info->Metadata->Title;
  $node->field_itemid[LANGUAGE_NONE][]['value'] = $info->ItemId;


  // Add Main document to node
  if ($file = _os2web_acadre_arp_get_file($info->PhysicalFileReference->FileName, $info->PhysicalFileReference->ItemId, $info->ItemId, $info->LocationId, $info->PhysicalFileReference->Version)) {
    $file->display = 1; // To avoid contraint violation.
    $node->field_main_document[LANGUAGE_NONE][0] = (array) $file;
  }

  node_submit($node);
  node_save($node);
  if (!is_numeric($node->nid)) {
    soap_error(3);
  }

  if ($nid) {
    return "Success: Updated Node-id = " . $nid;
  }

// Locate parent node.
  $parent_nid = array_shift(_os2web_acadre_arp_find_item($parent_item_id)); // Assume first element in case of confusion (shouldn't happen)
  if ($parent_node = node_load($parent_nid)) {
    $parent_node->field_documents[LANGUAGE_NONE][]['nid'] = $node->nid;
    node_submit($parent_node);
    node_save($parent_node);
  }
  else {
    node_delete($node->nid);
    soap_error(5);
  }

  return "Success: Node-id = " . $node->nid;
}

/**
 * _os2web_acadre_arp_process_memo 
 * 
 * @access protected
 * @return void
 */
function _os2web_acadre_arp_process_memo($info, $parent_item_id) {
  if ($file = _os2web_acadre_arp_get_file($info->PhysicalFileReference->FileName, $info->PhysicalFileReference->ItemId, $info->ItemId, $info->LocationId, $info->PhysicalFileReference->Version)) {
    $parent_nid = array_shift(_os2web_acadre_arp_find_item($parent_item_id)); // Assume first element in case of confusion (shouldn't happen)
    if ($parent_node = node_load($parent_nid)) {
      $existing_file_key = -1;
      foreach ($parent_node->field_additional_docs[LANGUAGE_NONE] as $key => $old_file) {
        if ($old_file['fid'] == $file->fid) {
          $existing_file_key = $key;
          break;
        }
      }
      $file->display = 1; // To avoid contraint violation.
      if ($existing_file_key === -1) {
        $parent_node->field_additional_docs[LANGUAGE_NONE][] = (array) $file;
      }
      else {
        $parent_node->field_additional_docs[LANGUAGE_NONE][$existing_file_key] = (array) $file;
      }
      node_save($parent_node);
      return "Success: Updated node-id = " . $parent_node->nid;
    }
  }
  return "Success: No updates.";
}

/**
 * _os2web_acadre_arp_process_supplement 
 * 
 * @access protected
 * @return void
 */
function _os2web_acadre_arp_process_supplement($info, $parent_item_id) {
  if ($file = _os2web_acadre_arp_get_file($info->PhysicalFileReference->FileName, $info->PhysicalFileReference->ItemId, $info->ItemId, $info->LocationId, $info->PhysicalFileReference->Version)) {
    $parent_nid = array_shift(_os2web_acadre_arp_find_item($parent_item_id)); // Assume first element in case of confusion (shouldn't happen)
    if ($parent_node = node_load($parent_nid)) {
      $existing_file_key = -1;
      foreach ($parent_node->field_arp_supplement[LANGUAGE_NONE] as $key => $old_file) {
        if ($old_file['fid'] == $file->fid) {
          $existing_file_key = $key;
          break;
        }
      }
      $file->display = 1; // To avoid contraint violation.
      if ($existing_file_key === -1) {
        $parent_node->field_arp_supplement[LANGUAGE_NONE][] = (array) $file;
      }
      else {
        $parent_node->field_arp_supplement[LANGUAGE_NONE][$existing_file_key] = (array) $file;
      }
      node_save($parent_node);
      return "Success: Updated node-id = " . $parent_node->nid;
    }
  }
  return "Success: No updates.";
}

/**
 * _os2web_acadre_arp_process_party 
 * 
 * @access protected
 * @return void
 */
function _os2web_acadre_arp_process_party($info, $parent_item_id) {
  $name = $info->Metadata->Name;
  if ($node = node_load(array_shift(_os2web_acadre_arp_find_item($parent_item_id)))) { // Assume first element in case of confusion (shouldn't happen)
    foreach ($node->field_arp_party[LANGUAGE_NONE] as $old_party) {
      if ($old_party['value'] == $name) {
        Return "Succes: Already exists.";
      }
    }
    $node->field_arp_party[LANGUAGE_NONE][]['value'] = $info->Metadata->Name;
    node_save($node);
    return "Success: Update node-id = " . $node->nid;
  }
  return "Success: No updates.";
}

// Helpers

/**
 * Dumps the wsdl for the serivce
 * 
 * @access protected
 * @return void
 */
function _os2web_acadre_arp_get_wsdl() {
  $filename = drupal_get_path('module', 'os2web_acadre_arp') . '/os2web_acadre_arp_publishing_handler.wsdl';
  $handle = fopen($filename, 'r');
  $contents = fread($handle, filesize($filename));
  fclose($handle);

  drupal_add_http_header('Connection', 'close', FALSE);
  drupal_add_http_header('Content-Length', drupal_strlen($contents), TRUE);
  drupal_add_http_header('Content-Type', 'text/plain; charset=utf-8', TRUE);
  drupal_add_http_header('Date', date('r'), TRUE);

  $replacements = array(
    '!endpointurl' => 'http' . ($_SERVER['HTTPS'] === 'on' ? 's' : '') . '://' . $_SERVER['SERVER_NAME'] . str_replace('?wsdl', '', $_SERVER['REQUEST_URI']),
  );
  echo format_string($contents, $replacements);
  exit;
}

/**
 * Throws a soap exception with a message. 
 * 
 * @param mixed $code 
 * @access public
 * @return void
 */
function soap_error($code) {
  $code_msg = array(
    1 => 'Test error, please ignore.',
    2 => 'Malformed XML.',
    3 => 'Unable to create content.',
    4 => 'Usupported document type.',
    5 => 'Parent node not located.',
  );
  throw new SoapFault((string) $code, isset($code_msg[$code]) ? $code_msg[$code] : 'Unknown error');
}

/**
 * Locates nids with a given ItemId 
 * 
 * @param string $item_id 
 * @access protected
 * @return array of nids
 */
function _os2web_acadre_arp_find_item($item_id) {
  $query = new EntityFieldQuery;
  $result = $query
      ->entityCondition('entity_type', 'node')
      ->propertyCondition('type', array('arp_case', 'arp_document'))
      ->propertyCondition('status', 1)
      ->fieldCondition('field_itemid', 'value', $item_id, '=')
      ->execute();
  $nids = array_keys($result['node']);
  return $nids;
}

function os2web_acadre_arp_node_delete($node) {
  if ($node->type == 'arp_case') {
    foreach ($node->field_documents[LANGUAGE_NONE] as $delta => $info) {
      node_delete($info['nid']);
    }
  }
}

function _os2web_acadre_arp_get_file($filename, $file_ref, $item_id, $location_id, $version) {

  $client = &drupal_static(__FUNCTION__);
  if (!$client) {
    module_load_include('class.inc', 'os2web_acadre_arp', 'SoapClientAuth');
    $options = array(
      'login' => 'acadre',
      'password' => 'PernoD=38%',
//      'proxy_host' => 'localhost',
//      'proxy_port' => 8080,
      'cache_wsdl' => WSDL_CACHE_BOTH,
      'exceptions' => TRUE,
    );
    $xdebug = function_exists('xdebug_enable');
    if ($xdebug)
      xdebug_disable();
    try {
      $client = new SoapClientAuth('http://10.1.1.112/Acadre/Acadre.Publishing.PublishingDataProviderService/PublishingDataProviderService.svc?wsdl', $options);
    } catch (Exception $exc) {
      error_log(basename(__FILE__) . ':' . __LINE__ . ' Var: $exc->getTraceAsString() = ' . print_r($exc->getTraceAsString(), 1));
      if ($xdebug)
        xdebug_enable();
      return FALSE;
    }
    if ($xdebug)
      xdebug_enable();
  }

  $args = array(
    'itemId' => $item_id,
    'locationId' => $location_id,
    'fileReference' => $file_ref,
    'version' => $version,
  );
  try {
    $call = $client->getPhysicalFile($args);
  } catch (Exception $exc) {
    error_log(basename(__FILE__) . ':' . __LINE__ . ' Var: $client = ' . print_r($client, 1));
    error_log(basename(__FILE__) . ':' . __LINE__ . ' Var: $exc->getTraceAsString() = ' . print_r($exc, 1));
    return FALSE;
  }
  $data = $call->GetPhysicalFileResult;

  $directory = variable_get('os2web_arp_directory', 'public://arp-docs');
  file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSONS);
  $uri = $directory . '/' . $filename;
  $fid = db_select('file_managed', 'fm')
          ->fields('fm', array('fid'))
          ->condition('uri', $uri)
          ->execute()->fetchField();
  if ($fid) {
    return file_unmanaged_save_data($data, $uri, FILE_EXISTS_REPLACE) ? file_load($fid) : FALSE;
  }
  elseif ($file = file_save_data($data, $uri, FILE_EXISTS_REPLACE)) {
    return $file;
  }
  else {
    error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' in ' . __FUNCTION__ . '()');
    error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File save failed.");
    return FALSE;
  }
}
