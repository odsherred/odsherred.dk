<?php

/**
 * Implements hook_init().
 */
function inline_ajax_search_init() {
  drupal_add_css(drupal_get_path('module', 'inline_ajax_search') . '/css/inline_ajax_search.css');
}

/**
 * Implements hook_permission().
 */
function inline_ajax_search_permission() {
  return array(
    'administer inline_ajax_search' => array(
      'title' => t('Administer Inline Ajax Search'),
    ),
    'search with inline_ajax_search' => array(
      'title' => t('Search with Inline Ajax Search'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function inline_ajax_search_menu() {
  $items = array();
  $items['admin/config/search/inline'] = array(
    'title' => 'Inline AJAX search settings',
    'description' => 'Inline AJAX search settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inline_ajax_search_settings'),
    'access arguments' => array('administer inline_ajax_search'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/search/inline/default'] = array(
    'title' => 'Inline AJAX search default settings',
    'description' => 'Inline AJAX search default settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inline_ajax_search_settings'),
    'access arguments' => array('administer inline_ajax_search'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['search/inline_ajax_search/get'] = array(
    'page callback' => '_inline_ajax_search',
    'access arguments' => array('search with inline_ajax_search'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/inline_ajax_search.inc',
  );
  $items['search/inline_ajax_search/post'] = array(
    'page callback' => '_inline_ajax_search_post',
    'access arguments' => array('search with inline_ajax_search'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/inline_ajax_search_post.inc',
  );
  return $items;
}

function inline_ajax_search_settings() {
  $form['inline_ajax_search_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of results shown'),
    '#default_value' => variable_get('inline_ajax_search_count', 10),
    '#size' => 3,
    '#maxlength' => 3,
  );
  $form['inline_ajax_search_snippet'] = array(
    '#type' => 'select',
    '#title' => t('Show/hide snippet or teaser'),
    '#default_value' => variable_get('inline_ajax_search_snippet', 0),
    '#options' => array(0 => t('Show none'), 1 => t('Show snippet'), 2 => t('Show teaser')),
  );
  $form['inline_ajax_search_target'] = array(
    '#type' => 'select',
    '#title' => t('Target of the links'),
    '#default_value' => variable_get('inline_ajax_search_target', '_self'),
    '#options' => array('_self' => t('Self'), '_blank' => t('Blank'), '_top' => t('Top'), '_parent' => t('Parent')),
  );
  $form['inline_ajax_show_more'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show the show more results link'),
      '#default_value' => variable_get('inline_ajax_show_more', 0),
  );
  $form['luceneapi'] = array(
    '#type' => 'fieldset',
    '#title' => t('Luceneapi settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  if (module_exists('luceneapi') && module_exists('luceneapi_node')) {
    $form['luceneapi']['inline_ajax_use_lucene'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use the Search Lucene API'),
      '#default_value' => variable_get('inline_ajax_use_lucene', 0),
    );
    $form['luceneapi']['inline_ajax_use_lucene_on_enter'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use the core search when hitting return.'),
      '#default_value' => variable_get('inline_ajax_use_lucene_on_enter', 0),
    );
    $form['luceneapi']['inline_ajax_wildcard'] = array(
      '#type' => 'select',
      '#title' => t('Location of the wildcard'),
      '#default_value' => variable_get('inline_ajax_wildcard', 0),
      '#options' => array(0 => t('End of the word'), 1 => t('Start of the word'), 2 => t('On both start and end')),
    );

    $options = array();
    // Fetch all defined Searchers.
    $result = db_query("SELECT name, label FROM {luceneapi_searcher} ORDER BY label ASC");
    foreach ($result AS $searcher) {
      $options[$searcher->name] = $searcher->label;
    }
    $form['luceneapi']['inline_ajax_lucene_searcher'] = array(
      '#type' => 'select',
      '#title' => t('Searcher'),
      '#description' => t('You have to define an index and a searcher in Luceneapi first.'),
      '#default_value' => variable_get('inline_ajax_lucene_searcher', ''),
      '#options' => $options,
    );
  }
  else {
    $form['luceneapi']['inline_ajax_use_lucene'] = array(
      '#type' => 'item',
      '#title' => 'Search Lucene API',
      '#value' => t('If you install the Search Lucene API this module uses wildcards to search with. This has as benefit that you don\'t have to search on a whole word, but on a part of a string.'),
    );
  }

  return system_settings_form($form);
}

function inline_ajax_search_settings_validate($form, &$form_state) {
  if (!is_numeric($form_state['values']['inline_ajax_search_count'])) {
    form_set_error('inline_ajax_search_count', t('This has to be a number.'));
  }
}

/**
 * Implements hook_theme().
 */
function inline_ajax_search_theme() {
  return array(
    'inline_ajax_search_theme_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'inline_ajax_search-theme-form',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function inline_ajax_search_block_info() {
  $blocks['inline_ajax_search'] = array('info' => t('Inline AJAX search form'));
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function inline_ajax_search_block_view($delta = '') {
  switch ($delta) {
    case 'inline_ajax_search':
      $block = array('content' => theme('inline_ajax_search_theme_form'));
      break;
  }
  return $block;
}

/**
 * Implements hook_search_execute().
 */
function inline_ajax_search_search_execute($keys = NULL) {
  // Build matching conditions
  $query = db_select('search_index', 'i', array('target' => 'slave'))->extend('SearchQuery')->extend('PagerDefault');
  $query->join('node', 'n', 'n.nid = i.sid');
  $query
    ->condition('n.status', 1)
    ->addTag('node_access')
    ->searchExpression($keys, 'node');

  // Insert special keywords.
  $query->setOption('type', 'n.type');
  $query->setOption('language', 'n.language');
  if ($query->setOption('term', 'ti.tid')) {
    $query->join('taxonomy_index', 'ti', 'n.nid = ti.nid');
  }
  // Only continue if the first pass query matches.
  if (!$query->executeFirstPass()) {
    return array();
  }

  // Add the ranking expressions.
  _node_rankings($query);

  // Load results.
  $find = $query
    ->execute();
  $results = array();
  foreach ($find as $item) {
    // Build the node body.
    $node = node_load($item->sid);
    node_build_content($node, 'search_result');
    $node->body = drupal_render($node->content);

    // Fetch comments for snippet.
    $node->rendered .= ' ' . module_invoke('comment', 'node_update_index', $node);
    // Fetch terms for snippet.
    $node->rendered .= ' ' . module_invoke('taxonomy', 'node_update_index', $node);

    $extra = module_invoke_all('node_search_result', $node);

    $results[] = array(
      'link' => url('node/' . $item->sid, array('absolute' => TRUE)),
      'type' => check_plain(node_type_get_name($node)),
      'title' => $node->title,
      'user' => theme('username', array('account' => $node)),
      'date' => $node->changed,
      'node' => $node,
      'extra' => $extra,
      'score' => $item->calculated_score,
      'snippet' => search_excerpt($keys, $node->body),
    );
  }
  return $results;
}

/**
 * Process variables for inline_ajax_search-theme-form.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $form
 *
 * @see inline_ajax_search-theme-form.tpl.php
 */
function template_preprocess_inline_ajax_search_theme_form(&$variables) {
  global $language;
  global $_IAS_page;
  if (!$_IAS_page) {
    $settings = array('IAS_settings' => array(
      'word_size' => variable_get('minimum_word_size', 3),
      'resultsShown' => FALSE,
      'countCharsShown' => FALSE,
      'IAS_el' => NULL,
      'IAS_el_res' => NULL,
      'word_size_msg' => t('You have to search with more than @count characters.', array('@count' => variable_get('minimum_word_size', 3))),
    ));
    drupal_add_js($settings, 'setting');
  }
  drupal_add_js(drupal_get_path('module', 'inline_ajax_search') . '/js/inline_ajax_search.js');

  $variables['inline_ajax_search'] = new stdClass();
  $variables['inline_ajax_search']->types = variable_get('inline_ajax_search_types', array());
  $variables['inline_ajax_search']->count = variable_get('inline_ajax_search_count', 10);
  $variables['inline_ajax_search']->formurl = url('search/inline_ajax_search/post', array('language' => $language));
}

function inline_ajax_search_string_format($str) {
  if (module_exists('luceneapi') && module_exists('luceneapi_node') && variable_get('inline_ajax_use_lucene', 0) == 1) {
    switch (variable_get('inline_ajax_wildcard', 0)) {
      case 1:
        $str = '*' . $str;
        break;
      case 2:
        $str = '*' . $str . '*';
        break;
      default:
        $str .= '*';
        break;
    }
  }
  return $str;
}